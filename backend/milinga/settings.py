"""
Django settings for milinga project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG') == 'TRUE'

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '.milinga.com', '.milinga.de', 'milinga.uber.space', ]
#TODO: CORS_ALLOW_ALL_ORIGINS = DEBUG ist gefährlich!
CORS_ALLOW_ALL_ORIGINS = DEBUG
# CORS_ALLOWED_ORIGINS = [
#     "https://localhost:5000",
#     "http://localhost:5000",
#     "https://127.0.0.1:5000",
#     "http://127.0.0.1:5000",
#     "https://milinga.com",
#     "https://milinga.de",
#     "https://milinga.uber.space",
# ]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend', # existing backend
    'allauth.account.auth_backends.AuthenticationBackend',
    # 'rest_framework.authentication.TokenAuthentication',
)

# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_countries',
    'widget_tweaks',
    'crispy_forms',
    'imagekit',
    'storages',
    'papertrail',
    'django_extensions',
    'djmoney',
    'djmoney.contrib.exchange',

    'channels',

#allauth:
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    # 'allauth.socialaccount',
    # 'allauth.socialaccount.providers.facebook',
    # 'allauth.socialaccount.providers.google',
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',
    # 'rest_auth.registration',
    'corsheaders',
    
    'pytz',
    'timezone_field',

    'huey.contrib.djhuey',

    'milinga',    #für management/commands

    'profiles',
    'teachers',
    'subjects',
    'reviews',
    'calendarapp',
    'chat',
    'credits',
    'videoconference',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',]
#TODO: ohne CSRF-Überprüfung gefährlich!
if DEBUG == False:
    MIDDLEWARE.append('django.middleware.csrf.CsrfViewMiddleware')
MIDDLEWARE.extend([
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'milinga.middleware.redirect_www_middleware.RedirectWWWMiddleware',
])

ROOT_URLCONF = 'milinga.urls'
ASGI_APPLICATION = "milinga.routing.application"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REDIS_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379')
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            # "hosts": [("localhost", 6379)],
            "hosts": [REDIS_URL]
            # "symmetric_encryption_keys": [SECRET_KEY],
        },
    },
}

#allauth:
SITE_ID = 1
ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
# SOCIALACCOUNT_QUERY_EMAIL = True    #eMail vom social account holen
ACCOUNT_USER_DISPLAY = lambda user: user.email
# REST_USE_JWT = True
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     )
# }
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
}
REST_SESSION_LOGIN = False
OLD_PASSWORD_FIELD_ENABLED = True

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# local
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#    },
#}

# # server
import dj_database_url
DATABASES = {}
DATABASES['default'] = dj_database_url.config(conn_max_age=600)#, ssl_require=True)

#docker
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'postgres',
#         'USER': 'postgres',
#         'PASSWORD': 'postgres',
#         'HOST': 'db',
#         'PORT': 5432,
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

USE_TZ = True
TIME_ZONE = 'UTC'

USE_L10N = True
USE_I18N = True
LANGUAGE_CODE = 'en'
MODELTRANSLATION_DEFAULT_LANGUAGE = 'en'

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]

# gettext = lambda s: s
# LANGUAGES = [
#     ('en', gettext('English')),
#     ('de', gettext('German')),
#     ('es', gettext('Spanish')),
# ]

#login/logout redirect
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

if os.getenv('EMAIL_IN_FILE') == 'TRUE':
    EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
    EMAIL_FILE_PATH = os.path.join(BASE_DIR, "sent_emails")
else:
    EMAIL_HOST = os.getenv('EMAIL_HOST')
    EMAIL_PORT = os.getenv('EMAIL_PORT')
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == "TRUE"
DEFAULT_FROM_EMAIL = "info@milinga.com"

CRISPY_TEMPLATE_PACK = 'bootstrap4'
CRISPY_FAIL_SILENTLY = not DEBUG

# SESSION_SAVE_EVERY_REQUEST = True
#SESSION_EXPIRE_AT_BROWSER_CLOSE = True

#security
# TODO: wieder rein?
# if not DEBUG:
#     SECURE_SSL_REDIRECT = True
#     SESSION_COOKIE_SECURE = True
#     CSRF_COOKIE_SECURE = True
# else:
#     SECURE_SSL_REDIRECT = False
#     SESSION_COOKIE_SECURE = False
#     CSRF_COOKIE_SECURE = False

#AWS
USE_S3 = os.getenv('USE_S3') == 'TRUE'
USE_S3_STATIC = False

if USE_S3:
    # aws settings
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_DEFAULT_ACL = None
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    # s3 public media settings
    PUBLIC_MEDIA_LOCATION = 'media'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
    DEFAULT_FILE_STORAGE = 'milinga.storage_backends.PublicMediaStorage'
    # s3 private media settings
    PRIVATE_MEDIA_LOCATION = 'private'
    PRIVATE_FILE_STORAGE = 'milinga.storage_backends.PrivateMediaStorage'
else:
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(os.getenv('DATA_DIR'), 'media')

if not USE_S3_STATIC:
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(os.getenv('DATA_DIR'), 'static')
    STATICFILES_DIRS = (
        os.path.join(os.path.dirname(os.path.realpath(__file__)), 'static/'),
    )
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
else:
    STATIC_LOCATION = 'static'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'
    STATICFILES_STORAGE = 'milinga.storage_backends.StaticStorage'

# from huey import RedisHuey
# from redis import ConnectionPool
# pool = ConnectionPool.from_url(REDIS_URL)
# HUEY = RedisHuey('my-queue', connection_pool=pool)
HUEY = {
    'huey_class': 'huey.RedisHuey',  # Huey implementation to use.
    'name': DATABASES['default']['NAME'],  # Use db name for huey.
    'results': True,  # Store return values of tasks.
    'store_none': False,  # If a task returns None, do not save to results.
    'immediate': False,#DEBUG,  # If DEBUG=True, run synchronously.
    'utc': True,  # Use UTC for all times internally.
    'blocking': True,  # Perform blocking pop rather than poll Redis.
    'connection': {
        # 'host': 'localhost',
        # 'port': 6379,
        # 'db': 0,
        # 'connection_pool': None,  # Definitely you should use pooling!
        # # ... tons of other options, see redis-py for details.

        # # huey-specific connection parameters.
        # 'read_timeout': 1,  # If not polling (blocking pop), use timeout.
        'url': REDIS_URL,  # Allow Redis config via a DSN.
    },
    'consumer': {
        'workers': 1,
        'worker_type': 'thread',
        'initial_delay': 0.1,  # Smallest polling interval, same as -d.
        'backoff': 1.15,  # Exponential backoff using this rate, -b.
        'max_delay': 10.0,  # Max possible polling interval, -m.
        'scheduler_interval': 1,  # Check schedule every second, -s.
        'periodic': True,  # Enable crontab feature.
        'check_worker_health': True,  # Enable worker health checks.
        'health_check_interval': 1,  # Check worker health every second.
    },
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'SysLog': {
            'level': 'DEBUG',
            'class': 'logging.handlers.SysLogHandler',
            'formatter': 'simple',
            'address': ('logs6.papertrailapp.com', 38207)
        },
    },
    'root': {
        'handlers': ['console',], #Logging auf Konsole
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['SysLog', ],#'console',],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': True,
        },
    },
    'formatters': {
        'simple': {
            'format': '%(asctime)s SENDER_NAME PROGRAM_NAME: %(message)s',
            'datefmt': '%Y-%m-%dT%H:%M:%S',
        },
    },
}